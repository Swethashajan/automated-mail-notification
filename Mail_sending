import boto3
import csv
import uuid

# AWS STS and SES setup
role_arn = 'arn:aws:iam::169987152393:role/PL_OA-oa-eui-sreclc-app09-dglobaldaaseu-idp_common'
region = 'us-east-1'

# Email details
sender_email = 'OACommunications@mail.iqvia.com'

EMAIL_TEMPLATE = """
<html>
<head></head>
<body>
  <p>Hi Team,</p>
  <p>Kindly note that the datasets mentioned below are scheduled for file delivery on <b>{schedule_date}</b>. However, the commencement of the process is pending due to the missing input file in the DaaS input location.</p>
  <p><b>Dataset name:</b> {dataset_name}<br>
     <b>Source File Name:</b> {file_pattern}<br>
     <b>Source path input directory:</b> {source_path}</p>
  <p>Can you please check your end and let us know when the input file will be copied for HDSC DaaS processing? We have informed the Global client about the delay and we need to confirm the estimated file delivery date.</p>
  <p>In the future, we kindly request that you provide advance notice to mailto:BDF-HDSC-Support@iqvia.comBDF-HDSC-Support@iqvia.com</a> in case of any deviations from the schedule on your end. This proactive communication will assist us in adjusting our delivery timeline and effectively communicating with our Global clients as well.</p>
</body>
</html>
"""

def get_session_token(role_arn: str, region: str):
    session = boto3.Session()
    sts = session.client("sts", region_name=region)
    try:
        response = sts.assume_role(
            RoleArn=role_arn,
            RoleSessionName="iqvia-session-" + str(uuid.uuid4())
        )
        creds = response["Credentials"]
        return creds["AccessKeyId"], creds["SecretAccessKey"], creds["SessionToken"]
    except Exception as e:
        print("Error occurred while assuming role:", e)
        return None, None, None

def send_emails_from_csv(csv_path, ses_client):
    with open(csv_path, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile, delimiter='~')
        for row in reader:
            dataset_name = row.get('DS_NAME', 'N/A')
            schedule_date = row.get('SCHEDULED_DLVRY_END_DATE', 'N/A')
            file_pattern = f"{dataset_name}_input_file.csv"
            source_path = f"/data/input/{row.get('CLIENT', 'N/A')}/{row.get('COUNTRY_NAME', 'N/A')}/{dataset_name}/"

            # Format subject line
            subject = f"DaaS {row.get('CLIENT', 'N/A')} - {row.get('COUNTRY_NAME', 'N/A')} - Source file delivery delay"

            # Handle multiple recipients
            recipients_raw = row.get('LO_CONTACT', '')
            recipient_emails = [email.strip().strip("'") for email in recipients_raw.split(',') if email.strip()]

            # Print recipient emails for debugging
            print(f"Parsed recipient emails for dataset '{dataset_name}': {recipient_emails}")


            if recipient_emails:
                body_html = EMAIL_TEMPLATE.format(
                    schedule_date=schedule_date,
                    dataset_name=dataset_name,
                    file_pattern=file_pattern,
                    source_path=source_path
                )

                try:
                    ses_client.send_email(
                        Source=sender_email,
                        Destination={'ToAddresses': recipient_emails},
                        Message={
                            'Subject': {'Data': subject},
                            'Body': {'Html': {'Data': body_html}}
                        }
                    )
                    print(f"Email sent to {', '.join(recipient_emails)} for dataset: {dataset_name}")
                except Exception as e:
                    print(f"Failed to send email to {', '.join(recipient_emails)} for dataset: {dataset_name}. Error: {e}")
            else:
                print(f"No recipient email found for dataset: {dataset_name}")

# Main execution
aws_access_key_id, aws_secret_access_key, aws_session_token = get_session_token(role_arn, region)

if aws_access_key_id:
    ses = boto3.client(
        'ses',
        region_name=region,
        aws_access_key_id=aws_access_key_id,
        aws_secret_access_key=aws_secret_access_key,
        aws_session_token=aws_session_token
    )

    send_emails_from_csv('Local_output.csv', ses)
else:
    print("ERROR: Could not assume role. Email sending aborted.")
